name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27018:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 24
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Lint backend code
      working-directory: ./backend
      run: npm run lint

    - name: Wait for services
      run: |
        sleep 10
        # Test MongoDB connection
        mongosh "mongodb://localhost:27018/task_analytics" --eval "db.runCommand('ping')"
        # Test Redis connection
        redis-cli -h localhost -p 6380 ping

    - name: Start backend server
      working-directory: ./backend
      run: |
        npm run start &
        sleep 5
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27018/task_analytics
        REDIS_HOST: localhost
        REDIS_PORT: 6380

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27018/task_analytics
        REDIS_HOST: localhost
        REDIS_PORT: 6380

    - name: Check backend coverage threshold
      working-directory: ./backend
      run: |
        # Extract coverage percentage from output
        COVERAGE=$(npm run test:coverage 2>&1 | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 60% threshold"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 60% threshold"
        fi

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 24
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint frontend code
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Check frontend coverage threshold
      working-directory: ./frontend
      run: |
        # Check if coverage report exists and meets threshold
        if [ ! -f coverage/coverage-summary.json ]; then
          echo "❌ Coverage report not found"
          exit 1
        fi
        
        # Extract coverage percentage
        COVERAGE=$(node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          console.log(coverage.total.lines.pct);
        ")
        
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 60% threshold"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 60% threshold"
        fi

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27018:27017

      redis:
        image: redis:7.2-alpine
        ports:
          - 6380:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 24
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../demo && npm ci

    - name: Start backend
      working-directory: ./backend
      run: |
        npm run start &
        sleep 10
      env:
        MONGODB_URI: mongodb://localhost:27018/task_analytics
        REDIS_HOST: localhost
        REDIS_PORT: 6380

    - name: Run integration demo
      working-directory: ./demo
      run: timeout 30s npm start || true

    - name: Verify API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3001/api/health
        
        # Test tasks endpoint
        curl -f http://localhost:3001/api/tasks
        
        # Test analytics endpoint
        curl -f http://localhost:3001/api/analytics

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 24
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: Install dependencies and run audit
      run: |
        cd backend && npm ci && npm audit --audit-level moderate
        cd ../frontend && npm ci && npm audit --audit-level moderate
        cd ../demo && npm ci && npm audit --audit-level moderate

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 24
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run linting
      run: |
        cd backend && npm run lint
        cd ../frontend && npm run lint

    - name: Check code formatting
      run: |
        cd backend && npx prettier --check "src/**/*.js"
        cd ../frontend && npx prettier --check "src/**/*.{js,vue}"

  deploy-ready:
    name: Deploy Ready Check
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build check
      run: |
        echo "✅ All tests passed"
        echo "✅ Coverage requirements met (>60%)"
        echo "✅ Security scan completed"
        echo "✅ Code quality checks passed"
        echo "🚀 Ready for deployment"